'''
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
'''
'''
Method: recursion O(n) time O(logn) space
'''
class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        self.res = []
        self.helper(root, 0)
        return self.res
        
    def helper(self, root, depth):
        if depth == len(self.res):
            self.res.append(root.val)  # add the value into res if new level reached
        if root.right: # explore from right to left
            self.helper(root.right, depth + 1)
        if root.left:
            self.helper(root.left, depth + 1)
            
'''
Method: Queue O(n) time O(n) space
'''
class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        stack = [root]
        res = []
        while stack:
            res.append(stack[-1].val)
            temp = []
            for n in stack:
                if n.left:
                    temp.append(n.left)
                if n.right:
                    temp.append(n.right)
            stack = temp
        return res
